/*
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 *
 * OpenAPI spec version: 1.1.10
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Jsflagr);
  }
}(this, function(expect, Jsflagr) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('EvalResult', function() {
      beforeEach(function() {
        instance = new Jsflagr.EvalResult();
      });

      it('should create an instance of EvalResult', function() {
        // TODO: update the code to test EvalResult
        expect(instance).to.be.a(Jsflagr.EvalResult);
      });

      it('should have the property flagID (base name: "flagID")', function() {
        // TODO: update the code to test the property flagID
        expect(instance).to.have.property('flagID');
        // expect(instance.flagID).to.be(expectedValueLiteral);
      });

      it('should have the property flagKey (base name: "flagKey")', function() {
        // TODO: update the code to test the property flagKey
        expect(instance).to.have.property('flagKey');
        // expect(instance.flagKey).to.be(expectedValueLiteral);
      });

      it('should have the property flagSnapshotID (base name: "flagSnapshotID")', function() {
        // TODO: update the code to test the property flagSnapshotID
        expect(instance).to.have.property('flagSnapshotID');
        // expect(instance.flagSnapshotID).to.be(expectedValueLiteral);
      });

      it('should have the property segmentID (base name: "segmentID")', function() {
        // TODO: update the code to test the property segmentID
        expect(instance).to.have.property('segmentID');
        // expect(instance.segmentID).to.be(expectedValueLiteral);
      });

      it('should have the property variantID (base name: "variantID")', function() {
        // TODO: update the code to test the property variantID
        expect(instance).to.have.property('variantID');
        // expect(instance.variantID).to.be(expectedValueLiteral);
      });

      it('should have the property variantKey (base name: "variantKey")', function() {
        // TODO: update the code to test the property variantKey
        expect(instance).to.have.property('variantKey');
        // expect(instance.variantKey).to.be(expectedValueLiteral);
      });

      it('should have the property variantAttachment (base name: "variantAttachment")', function() {
        // TODO: update the code to test the property variantAttachment
        expect(instance).to.have.property('variantAttachment');
        // expect(instance.variantAttachment).to.be(expectedValueLiteral);
      });

      it('should have the property evalContext (base name: "evalContext")', function() {
        // TODO: update the code to test the property evalContext
        expect(instance).to.have.property('evalContext');
        // expect(instance.evalContext).to.be(expectedValueLiteral);
      });

      it('should have the property timestamp (base name: "timestamp")', function() {
        // TODO: update the code to test the property timestamp
        expect(instance).to.have.property('timestamp');
        // expect(instance.timestamp).to.be(expectedValueLiteral);
      });

      it('should have the property evalDebugLog (base name: "evalDebugLog")', function() {
        // TODO: update the code to test the property evalDebugLog
        expect(instance).to.have.property('evalDebugLog');
        // expect(instance.evalDebugLog).to.be(expectedValueLiteral);
      });

    });
  });

}));
