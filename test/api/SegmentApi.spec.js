/*
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 *
 * OpenAPI spec version: 1.1.10
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Jsflagr);
  }
}(this, function(expect, Jsflagr) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Jsflagr.SegmentApi();
  });

  describe('(package)', function() {
    describe('SegmentApi', function() {
      describe('createSegment', function() {
        it('should call createSegment successfully', function(done) {
          // TODO: uncomment, update parameter values for createSegment call and complete the assertions
          /*
          var flagID = 789;
          var body = new Jsflagr.CreateSegmentRequest();
          body.description = "";
          body.rolloutPercent = "0";

          instance.createSegment(flagID, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Jsflagr.Segment);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.constraints;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Jsflagr.Constraint);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.property).to.be.a('string');
                expect(data.property).to.be("");
                expect(data.operator).to.be.a('string');
                expect(data.operator).to.be("EQ");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");

                      }
            }
            {
              let dataCtr = data.distributions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Jsflagr.Distribution);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.percent).to.be.a('number');
                expect(data.percent).to.be("0");
                expect(data.variantKey).to.be.a('string');
                expect(data.variantKey).to.be("");
                expect(data.variantID).to.be.a('number');
                expect(data.variantID).to.be("0");

                      }
            }
            expect(data.rank).to.be.a('number');
            expect(data.rank).to.be("0");
            expect(data.rolloutPercent).to.be.a('number');
            expect(data.rolloutPercent).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteSegment', function() {
        it('should call deleteSegment successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteSegment call
          /*
          var flagID = 789;
          var segmentID = 789;

          instance.deleteSegment(flagID, segmentID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findSegments', function() {
        it('should call findSegments successfully', function(done) {
          // TODO: uncomment, update parameter values for findSegments call and complete the assertions
          /*
          var flagID = 789;

          instance.findSegments(flagID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Jsflagr.Segment);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              {
                let dataCtr = data.constraints;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Jsflagr.Constraint);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.property).to.be.a('string');
                  expect(data.property).to.be("");
                  expect(data.operator).to.be.a('string');
                  expect(data.operator).to.be("EQ");
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("");
  
                        }
              }
              {
                let dataCtr = data.distributions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Jsflagr.Distribution);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.percent).to.be.a('number');
                  expect(data.percent).to.be("0");
                  expect(data.variantKey).to.be.a('string');
                  expect(data.variantKey).to.be("");
                  expect(data.variantID).to.be.a('number');
                  expect(data.variantID).to.be("0");
  
                        }
              }
              expect(data.rank).to.be.a('number');
              expect(data.rank).to.be("0");
              expect(data.rolloutPercent).to.be.a('number');
              expect(data.rolloutPercent).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putSegment', function() {
        it('should call putSegment successfully', function(done) {
          // TODO: uncomment, update parameter values for putSegment call and complete the assertions
          /*
          var flagID = 789;
          var segmentID = 789;
          var body = new Jsflagr.PutSegmentRequest();
          body.description = "";
          body.rolloutPercent = "0";

          instance.putSegment(flagID, segmentID, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Jsflagr.Segment);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.constraints;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Jsflagr.Constraint);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.property).to.be.a('string');
                expect(data.property).to.be("");
                expect(data.operator).to.be.a('string');
                expect(data.operator).to.be("EQ");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");

                      }
            }
            {
              let dataCtr = data.distributions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Jsflagr.Distribution);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.percent).to.be.a('number');
                expect(data.percent).to.be("0");
                expect(data.variantKey).to.be.a('string');
                expect(data.variantKey).to.be("");
                expect(data.variantID).to.be.a('number');
                expect(data.variantID).to.be("0");

                      }
            }
            expect(data.rank).to.be.a('number');
            expect(data.rank).to.be("0");
            expect(data.rolloutPercent).to.be.a('number');
            expect(data.rolloutPercent).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putSegmentsReorder', function() {
        it('should call putSegmentsReorder successfully', function(done) {
          // TODO: uncomment, update parameter values for putSegmentsReorder call
          /*
          var flagID = 789;
          var body = new Jsflagr.PutSegmentReorderRequest();
          body.segmentIDs = ["0"];

          instance.putSegmentsReorder(flagID, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
