/*
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 *
 * OpenAPI spec version: 1.1.10
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Jsflagr);
  }
}(this, function(expect, Jsflagr) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Jsflagr.EvaluationApi();
  });

  describe('(package)', function() {
    describe('EvaluationApi', function() {
      describe('postEvaluation', function() {
        it('should call postEvaluation successfully', function(done) {
          // TODO: uncomment, update parameter values for postEvaluation call and complete the assertions
          /*
          var body = new Jsflagr.EvalContext();
          body.entityID = "";
          body.entityType = "";
          body.entityContext = ;
          body.enableDebug = false;
          body.flagID = "0";
          body.flagKey = "";
          body.flagTags = [""];

          instance.postEvaluation(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Jsflagr.EvalResult);
            expect(data.flagID).to.be.a('number');
            expect(data.flagID).to.be("0");
            expect(data.flagKey).to.be.a('string');
            expect(data.flagKey).to.be("");
            expect(data.flagSnapshotID).to.be.a('number');
            expect(data.flagSnapshotID).to.be("0");
            expect(data.segmentID).to.be.a('number');
            expect(data.segmentID).to.be("0");
            expect(data.variantID).to.be.a('number');
            expect(data.variantID).to.be("0");
            expect(data.variantKey).to.be.a('string');
            expect(data.variantKey).to.be("");
            expect(data.variantAttachment).to.be.a(Object);
            expect(data.variantAttachment).to.be();
            expect(data.evalContext).to.be.a(Jsflagr.EvalContext);
                  expect(data.evalContext.entityID).to.be.a('string');
              expect(data.evalContext.entityID).to.be("");
              expect(data.evalContext.entityType).to.be.a('string');
              expect(data.evalContext.entityType).to.be("");
              expect(data.evalContext.entityContext).to.be.a(Object);
              expect(data.evalContext.entityContext).to.be();
              expect(data.evalContext.enableDebug).to.be.a('boolean');
              expect(data.evalContext.enableDebug).to.be(false);
              expect(data.evalContext.flagID).to.be.a('number');
              expect(data.evalContext.flagID).to.be("0");
              expect(data.evalContext.flagKey).to.be.a('string');
              expect(data.evalContext.flagKey).to.be("");
              {
                let dataCtr = data.evalContext.flagTags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            expect(data.timestamp).to.be.a('string');
            expect(data.timestamp).to.be("");
            expect(data.evalDebugLog).to.be.a(Jsflagr.EvalDebugLog);
                  {
                let dataCtr = data.evalDebugLog.segmentDebugLogs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Jsflagr.SegmentDebugLog);
                  expect(data.segmentID).to.be.a('number');
                  expect(data.segmentID).to.be("0");
                  expect(data.msg).to.be.a('string');
                  expect(data.msg).to.be("");
  
                        }
              }
              expect(data.evalDebugLog.msg).to.be.a('string');
              expect(data.evalDebugLog.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postEvaluationBatch', function() {
        it('should call postEvaluationBatch successfully', function(done) {
          // TODO: uncomment, update parameter values for postEvaluationBatch call and complete the assertions
          /*
          var body = new Jsflagr.EvaluationBatchRequest();
          body.entities = [new Jsflagr.EvaluationEntity()];
          body.entities[0].entityID = "";
          body.entities[0].entityType = "";
          body.entities[0].entityContext = ;
          body.enableDebug = false;
          body.flagIDs = ["0"];
          body.flagKeys = [""];
          body.flagTags = [""];

          instance.postEvaluationBatch(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Jsflagr.EvaluationBatchResponse);
            {
              let dataCtr = data.evaluationResults;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Jsflagr.EvalResult);
                expect(data.flagID).to.be.a('number');
                expect(data.flagID).to.be("0");
                expect(data.flagKey).to.be.a('string');
                expect(data.flagKey).to.be("");
                expect(data.flagSnapshotID).to.be.a('number');
                expect(data.flagSnapshotID).to.be("0");
                expect(data.segmentID).to.be.a('number');
                expect(data.segmentID).to.be("0");
                expect(data.variantID).to.be.a('number');
                expect(data.variantID).to.be("0");
                expect(data.variantKey).to.be.a('string');
                expect(data.variantKey).to.be("");
                expect(data.variantAttachment).to.be.a(Object);
                expect(data.variantAttachment).to.be();
                expect(data.evalContext).to.be.a(Jsflagr.EvalContext);
                      expect(data.evalContext.entityID).to.be.a('string');
                  expect(data.evalContext.entityID).to.be("");
                  expect(data.evalContext.entityType).to.be.a('string');
                  expect(data.evalContext.entityType).to.be("");
                  expect(data.evalContext.entityContext).to.be.a(Object);
                  expect(data.evalContext.entityContext).to.be();
                  expect(data.evalContext.enableDebug).to.be.a('boolean');
                  expect(data.evalContext.enableDebug).to.be(false);
                  expect(data.evalContext.flagID).to.be.a('number');
                  expect(data.evalContext.flagID).to.be("0");
                  expect(data.evalContext.flagKey).to.be.a('string');
                  expect(data.evalContext.flagKey).to.be("");
                  {
                    let dataCtr = data.evalContext.flagTags;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                expect(data.timestamp).to.be.a('string');
                expect(data.timestamp).to.be("");
                expect(data.evalDebugLog).to.be.a(Jsflagr.EvalDebugLog);
                      {
                    let dataCtr = data.evalDebugLog.segmentDebugLogs;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Jsflagr.SegmentDebugLog);
                      expect(data.segmentID).to.be.a('number');
                      expect(data.segmentID).to.be("0");
                      expect(data.msg).to.be.a('string');
                      expect(data.msg).to.be("");
      
                            }
                  }
                  expect(data.evalDebugLog.msg).to.be.a('string');
                  expect(data.evalDebugLog.msg).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
