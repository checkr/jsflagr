/**
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice
 *
 * OpenAPI spec version: 1.0.10
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateSegmentRequest', 'model/Error', 'model/PutSegmentReorderRequest', 'model/PutSegmentRequest', 'model/Segment'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateSegmentRequest'), require('../model/Error'), require('../model/PutSegmentReorderRequest'), require('../model/PutSegmentRequest'), require('../model/Segment'));
  } else {
    // Browser globals (root is window)
    if (!root.Flagr) {
      root.Flagr = {};
    }
    root.Flagr.SegmentApi = factory(root.Flagr.ApiClient, root.Flagr.CreateSegmentRequest, root.Flagr.Error, root.Flagr.PutSegmentReorderRequest, root.Flagr.PutSegmentRequest, root.Flagr.Segment);
  }
}(this, function(ApiClient, CreateSegmentRequest, Error, PutSegmentReorderRequest, PutSegmentRequest, Segment) {
  'use strict';

  /**
   * Segment service.
   * @module api/SegmentApi
   * @version 1.0.10
   */

  /**
   * Constructs a new SegmentApi. 
   * @alias module:api/SegmentApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createSegment operation.
     * @callback module:api/SegmentApi~createSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Segment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} flagID numeric ID of the flag to get
     * @param {module:model/CreateSegmentRequest} body create a segment under a flag
     * @param {module:api/SegmentApi~createSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Segment}
     */
    this.createSegment = function(flagID, body, callback) {
      var postBody = body;

      // verify the required parameter 'flagID' is set
      if (flagID === undefined || flagID === null) {
        throw new Error("Missing the required parameter 'flagID' when calling createSegment");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSegment");
      }


      var pathParams = {
        'flagID': flagID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Segment;

      return this.apiClient.callApi(
        '/flags/{flagID}/segments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSegment operation.
     * @callback module:api/SegmentApi~deleteSegmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} flagID numeric ID of the flag
     * @param {Number} segmentID numeric ID of the segment
     * @param {module:api/SegmentApi~deleteSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSegment = function(flagID, segmentID, callback) {
      var postBody = null;

      // verify the required parameter 'flagID' is set
      if (flagID === undefined || flagID === null) {
        throw new Error("Missing the required parameter 'flagID' when calling deleteSegment");
      }

      // verify the required parameter 'segmentID' is set
      if (segmentID === undefined || segmentID === null) {
        throw new Error("Missing the required parameter 'segmentID' when calling deleteSegment");
      }


      var pathParams = {
        'flagID': flagID,
        'segmentID': segmentID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/flags/{flagID}/segments/{segmentID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findSegments operation.
     * @callback module:api/SegmentApi~findSegmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Segment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} flagID numeric ID of the flag to get
     * @param {module:api/SegmentApi~findSegmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Segment>}
     */
    this.findSegments = function(flagID, callback) {
      var postBody = null;

      // verify the required parameter 'flagID' is set
      if (flagID === undefined || flagID === null) {
        throw new Error("Missing the required parameter 'flagID' when calling findSegments");
      }


      var pathParams = {
        'flagID': flagID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Segment];

      return this.apiClient.callApi(
        '/flags/{flagID}/segments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putSegment operation.
     * @callback module:api/SegmentApi~putSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Segment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} flagID numeric ID of the flag
     * @param {Number} segmentID numeric ID of the segment
     * @param {module:model/PutSegmentRequest} body update a segment
     * @param {module:api/SegmentApi~putSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Segment}
     */
    this.putSegment = function(flagID, segmentID, body, callback) {
      var postBody = body;

      // verify the required parameter 'flagID' is set
      if (flagID === undefined || flagID === null) {
        throw new Error("Missing the required parameter 'flagID' when calling putSegment");
      }

      // verify the required parameter 'segmentID' is set
      if (segmentID === undefined || segmentID === null) {
        throw new Error("Missing the required parameter 'segmentID' when calling putSegment");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSegment");
      }


      var pathParams = {
        'flagID': flagID,
        'segmentID': segmentID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Segment;

      return this.apiClient.callApi(
        '/flags/{flagID}/segments/{segmentID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putSegmentsReorder operation.
     * @callback module:api/SegmentApi~putSegmentsReorderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} flagID numeric ID of the flag
     * @param {module:model/PutSegmentReorderRequest} body reorder segments
     * @param {module:api/SegmentApi~putSegmentsReorderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putSegmentsReorder = function(flagID, body, callback) {
      var postBody = body;

      // verify the required parameter 'flagID' is set
      if (flagID === undefined || flagID === null) {
        throw new Error("Missing the required parameter 'flagID' when calling putSegmentsReorder");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSegmentsReorder");
      }


      var pathParams = {
        'flagID': flagID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/flags/{flagID}/segments/reorder', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
