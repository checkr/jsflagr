/*
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 *
 * OpenAPI spec version: 1.1.10
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Segment', 'model/Tag', 'model/Variant'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Segment'), require('./Tag'), require('./Variant'));
  } else {
    // Browser globals (root is window)
    if (!root.Jsflagr) {
      root.Jsflagr = {};
    }
    root.Jsflagr.Flag = factory(root.Jsflagr.ApiClient, root.Jsflagr.Segment, root.Jsflagr.Tag, root.Jsflagr.Variant);
  }
}(this, function(ApiClient, Segment, Tag, Variant) {
  'use strict';

  /**
   * The Flag model module.
   * @module model/Flag
   * @version 1.1.10
   */

  /**
   * Constructs a new <code>Flag</code>.
   * @alias module:model/Flag
   * @class
   * @param description {String} 
   * @param enabled {Boolean} 
   * @param dataRecordsEnabled {Boolean} enabled data records will get data logging in the metrics pipeline, for example, kafka.
   */
  var exports = function(description, enabled, dataRecordsEnabled) {
    this.description = description;
    this.enabled = enabled;
    this.dataRecordsEnabled = dataRecordsEnabled;
  };

  /**
   * Constructs a <code>Flag</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Flag} obj Optional instance to populate.
   * @return {module:model/Flag} The populated <code>Flag</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('key'))
        obj.key = ApiClient.convertToType(data['key'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('enabled'))
        obj.enabled = ApiClient.convertToType(data['enabled'], 'Boolean');
      if (data.hasOwnProperty('tags'))
        obj.tags = ApiClient.convertToType(data['tags'], [Tag]);
      if (data.hasOwnProperty('segments'))
        obj.segments = ApiClient.convertToType(data['segments'], [Segment]);
      if (data.hasOwnProperty('variants'))
        obj.variants = ApiClient.convertToType(data['variants'], [Variant]);
      if (data.hasOwnProperty('dataRecordsEnabled'))
        obj.dataRecordsEnabled = ApiClient.convertToType(data['dataRecordsEnabled'], 'Boolean');
      if (data.hasOwnProperty('entityType'))
        obj.entityType = ApiClient.convertToType(data['entityType'], 'String');
      if (data.hasOwnProperty('notes'))
        obj.notes = ApiClient.convertToType(data['notes'], 'String');
      if (data.hasOwnProperty('createdBy'))
        obj.createdBy = ApiClient.convertToType(data['createdBy'], 'String');
      if (data.hasOwnProperty('updatedBy'))
        obj.updatedBy = ApiClient.convertToType(data['updatedBy'], 'String');
      if (data.hasOwnProperty('updatedAt'))
        obj.updatedAt = ApiClient.convertToType(data['updatedAt'], 'Date');
    }
    return obj;
  }

  /**
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * unique key representation of the flag
   * @member {String} key
   */
  exports.prototype.key = undefined;

  /**
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * @member {Boolean} enabled
   */
  exports.prototype.enabled = undefined;

  /**
   * @member {Array.<module:model/Tag>} tags
   */
  exports.prototype.tags = undefined;

  /**
   * @member {Array.<module:model/Segment>} segments
   */
  exports.prototype.segments = undefined;

  /**
   * @member {Array.<module:model/Variant>} variants
   */
  exports.prototype.variants = undefined;

  /**
   * enabled data records will get data logging in the metrics pipeline, for example, kafka.
   * @member {Boolean} dataRecordsEnabled
   */
  exports.prototype.dataRecordsEnabled = undefined;

  /**
   * it will override the entityType in the evaluation logs if it's not empty
   * @member {String} entityType
   */
  exports.prototype.entityType = undefined;

  /**
   * flag usage details in markdown format
   * @member {String} notes
   */
  exports.prototype.notes = undefined;

  /**
   * @member {String} createdBy
   */
  exports.prototype.createdBy = undefined;

  /**
   * @member {String} updatedBy
   */
  exports.prototype.updatedBy = undefined;

  /**
   * @member {Date} updatedAt
   */
  exports.prototype.updatedAt = undefined;

  return exports;

}));
